import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'dart:async';
import 'dart:math';
import '../../providers/mood_provider.dart';

enum RecordingState {
  idle,
  recording,
  completed,
  processing,
}

class RecordingScreen extends ConsumerStatefulWidget {
  const RecordingScreen({super.key});

  @override
  ConsumerState<RecordingScreen> createState() => _RecordingScreenState();
}

class _RecordingScreenState extends ConsumerState<RecordingScreen>
    with TickerProviderStateMixin {
  RecordingState _recordingState = RecordingState.idle;
  Timer? _recordingTimer;
  int _recordingDuration = 0;
  static const int maxRecordingDuration = 60; // 60Áßí
  
  late AnimationController _pulseController;
  late AnimationController _waveController;
  late Animation<double> _pulseAnimation;
  late Animation<double> _waveAnimation;

  @override
  void initState() {
    super.initState();
    
    // „Éë„É´„Çπ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
    _pulseController = AnimationController(
      duration: const Duration(milliseconds: 1500),
      vsync: this,
    );
    _pulseAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _pulseController, curve: Curves.easeInOut),
    );
    
    // Ê≥¢ÂΩ¢„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
    _waveController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    _waveAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _waveController, curve: Curves.easeInOut),
    );
  }

  @override
  void dispose() {
    _recordingTimer?.cancel();
    _pulseController.dispose();
    _waveController.dispose();
    super.dispose();
  }

  void _startRecording() async {
    setState(() {
      _recordingState = RecordingState.recording;
      _recordingDuration = 0;
    });

    // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÈñãÂßã
    _pulseController.repeat();
    _waveController.repeat();

    // Èå≤Èü≥„Çø„Ç§„Éû„ÉºÈñãÂßã
    _recordingTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
      setState(() {
        _recordingDuration++;
      });

      if (_recordingDuration >= maxRecordingDuration) {
        _stopRecording();
      }
    });

    // ÂÆüÈöõ„ÅÆÈå≤Èü≥Âá¶ÁêÜ„ÅØÂ∞ÜÊù•ÂÆüË£Ö
    // await record.start();
  }

  void _stopRecording() async {
    _recordingTimer?.cancel();
    _pulseController.stop();
    _waveController.stop();

    setState(() {
      _recordingState = RecordingState.completed;
    });

    // ÂÆüÈöõ„ÅÆÈå≤Èü≥ÂÅúÊ≠¢Âá¶ÁêÜ„ÅØÂ∞ÜÊù•ÂÆüË£Ö
    // await record.stop();
  }

  void _processRecording() async {
    setState(() {
      _recordingState = RecordingState.processing;
    });

    try {
      // „É©„É≥„ÉÄ„É†„Å™„Çπ„Ç≥„Ç¢„ÇíÁîüÊàêÔºàÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØÈü≥Â£∞Ëß£ÊûêÁµêÊûú„Çí‰ΩøÁî®Ôºâ
      final random = Random();
      final score = (random.nextDouble() * 2.0) - 1.0;
      
      // „Çµ„É≥„Éó„É´ÂÆüË£Ö: ÊÑüÊÉÖ„Çπ„Ç≥„Ç¢„Çí‰øùÂ≠ò
      await ref.read(moodProvider.notifier).addMoodEntry(score);
      
      // ÁµêÊûú„ÇíË°®Á§∫
      if (mounted) {
        _showResultDialog(score);
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Âá¶ÁêÜ„Ç®„É©„Éº: ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      setState(() {
        _recordingState = RecordingState.idle;
      });
    }
  }

  void _showResultDialog(double score) {
    final label = score >= 0.5 
        ? '„Éù„Ç∏„ÉÜ„Ç£„Éñ' 
        : score <= -0.5 
            ? '„Éç„Ç¨„ÉÜ„Ç£„Éñ' 
            : '„Éã„É•„Éº„Éà„É©„É´';
    
    final emoji = score >= 0.5 
        ? 'üòä' 
        : score <= -0.5 
            ? 'üò¢' 
            : 'üòê';

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Text(emoji, style: const TextStyle(fontSize: 24)),
            const SizedBox(width: 8),
            const Text('Ëß£ÊûêÂÆå‰∫Ü'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              '„Çπ„Ç≥„Ç¢: ${score.toStringAsFixed(2)}',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'ÊÑüÊÉÖ: $label',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 16),
            const Text('‰ªäÊó•„ÅÆÈü≥Â£∞Êó•Ë®ò„ÇíË®òÈå≤„Åó„Åæ„Åó„ÅüÔºÅ'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              context.go('/home');
            },
            child: const Text('„Éõ„Éº„É†„Å´Êàª„Çã'),
          ),
        ],
      ),
    );
  }

  void _resetRecording() {
    setState(() {
      _recordingState = RecordingState.idle;
      _recordingDuration = 0;
    });
  }

  @override
  Widget build(BuildContext context) {
    final moodState = ref.watch(moodProvider);
    
    return Scaffold(
      appBar: AppBar(
        title: const Text('Èü≥Â£∞Èå≤Èü≥'),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: _recordingState == RecordingState.recording || 
                     _recordingState == RecordingState.processing
              ? null
              : () => context.go('/home'),
        ),
      ),
      body: Container(
        width: double.infinity,
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Èå≤Èü≥Áä∂ÊÖãË°®Á§∫
            Text(
              _getStatusText(),
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                fontWeight: FontWeight.bold,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 32),

            // „Çø„Ç§„Éû„ÉºË°®Á§∫
            if (_recordingState == RecordingState.recording) ...[
              Text(
                _formatDuration(_recordingDuration),
                style: Theme.of(context).textTheme.displayMedium?.copyWith(
                  fontWeight: FontWeight.bold,
                  color: Colors.red,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                'ÊÆã„Çä ${_formatDuration(maxRecordingDuration - _recordingDuration)}',
                style: Theme.of(context).textTheme.bodyLarge,
              ),
              const SizedBox(height: 32),
            ] else if (_recordingState == RecordingState.completed) ...[
              Text(
                'Èå≤Èü≥ÊôÇÈñì: ${_formatDuration(_recordingDuration)}',
                style: Theme.of(context).textTheme.titleLarge?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 32),
            ],

            // Èå≤Èü≥„Éú„Çø„É≥„Ç®„É™„Ç¢
            SizedBox(
              height: 200,
              child: Stack(
                alignment: Alignment.center,
                children: [
                  // „Éë„É´„Çπ„Ç®„Éï„Çß„ÇØ„Éà
                  if (_recordingState == RecordingState.recording)
                    AnimatedBuilder(
                      animation: _pulseAnimation,
                      builder: (context, child) {
                        return Container(
                          width: 160 + (_pulseAnimation.value * 40),
                          height: 160 + (_pulseAnimation.value * 40),
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            color: Colors.red.withOpacity(0.3 - (_pulseAnimation.value * 0.3)),
                          ),
                        );
                      },
                    ),
                  
                  // Ê≥¢ÂΩ¢„Ç®„Éï„Çß„ÇØ„Éà
                  if (_recordingState == RecordingState.recording)
                    AnimatedBuilder(
                      animation: _waveAnimation,
                      builder: (context, child) {
                        return CustomPaint(
                          size: const Size(200, 50),
                          painter: WaveformPainter(_waveAnimation.value),
                        );
                      },
                    ),

                  // „É°„Ç§„É≥Èå≤Èü≥„Éú„Çø„É≥
                  GestureDetector(
                    onTap: _getButtonAction(),
                    child: Container(
                      width: 120,
                      height: 120,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        color: _getButtonColor(),
                        boxShadow: [
                          BoxShadow(
                            color: _getButtonColor().withOpacity(0.3),
                            blurRadius: 20,
                            spreadRadius: 5,
                          ),
                        ],
                      ),
                      child: Icon(
                        _getButtonIcon(),
                        size: 48,
                        color: Colors.white,
                      ),
                    ),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 32),

            // Ë™¨Êòé„ÉÜ„Ç≠„Çπ„Éà
            Text(
              _getInstructionText(),
              style: Theme.of(context).textTheme.bodyLarge,
              textAlign: TextAlign.center,
            ),

            const SizedBox(height: 32),

            // „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥
            if (_recordingState == RecordingState.completed) ...[
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  OutlinedButton.icon(
                    onPressed: _resetRecording,
                    icon: const Icon(Icons.refresh),
                    label: const Text('ÂÜçÈå≤Èü≥'),
                  ),
                  ElevatedButton.icon(
                    onPressed: moodState.isLoading ? null : _processRecording,
                    icon: moodState.isLoading
                        ? const SizedBox(
                            width: 16,
                            height: 16,
                            child: CircularProgressIndicator(strokeWidth: 2),
                          )
                        : const Icon(Icons.send),
                    label: Text(moodState.isLoading ? 'Âá¶ÁêÜ‰∏≠...' : 'ÈÄÅ‰ø°'),
                  ),
                ],
              ),
            ],

            if (_recordingState == RecordingState.processing) ...[
              const CircularProgressIndicator(),
              const SizedBox(height: 16),
              const Text('Èü≥Â£∞„ÇíËß£Êûê‰∏≠...'),
            ],
          ],
        ),
      ),
    );
  }

  String _getStatusText() {
    switch (_recordingState) {
      case RecordingState.idle:
        return '‰ªäÊó•„ÅÆÊ∞óÊåÅ„Å°„ÇíË©±„Åó„Å¶„Åø„Åæ„Åó„Çá„ÅÜ';
      case RecordingState.recording:
        return 'Èå≤Èü≥‰∏≠...';
      case RecordingState.completed:
        return 'Èå≤Èü≥ÂÆå‰∫ÜÔºÅ';
      case RecordingState.processing:
        return 'Ëß£Êûê‰∏≠...';
    }
  }

  String _getInstructionText() {
    switch (_recordingState) {
      case RecordingState.idle:
        return 'Èå≤Èü≥„Éú„Çø„É≥„Çí„Çø„ÉÉ„Éó„Åó„Å¶„ÄÅ‰ªäÊó•„ÅÆÂá∫Êù•‰∫ã„ÇÑÊ∞óÊåÅ„Å°„ÇíËá™Áî±„Å´Ë©±„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\nÊúÄÂ§ß60Áßí„Åæ„ÅßÈå≤Èü≥„Åß„Åç„Åæ„Åô„ÄÇ';
      case RecordingState.recording:
        return 'Ëá™Áî±„Å´Ë©±„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„Çø„ÉÉ„Éó„Åô„Çã„Å®Èå≤Èü≥„ÇíÂÅúÊ≠¢„Åó„Åæ„Åô„ÄÇ';
      case RecordingState.completed:
        return 'Èå≤Èü≥„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇÂÜçÈå≤Èü≥„Åæ„Åü„ÅØÈÄÅ‰ø°„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ';
      case RecordingState.processing:
        return 'AI„ÅåÈü≥Â£∞„ÇíËß£Êûê„Åó„Å¶ÊÑüÊÉÖ„Çπ„Ç≥„Ç¢„ÇíÁÆóÂá∫„Åó„Å¶„ÅÑ„Åæ„Åô...';
    }
  }

  VoidCallback? _getButtonAction() {
    switch (_recordingState) {
      case RecordingState.idle:
        return _startRecording;
      case RecordingState.recording:
        return _stopRecording;
      case RecordingState.completed:
      case RecordingState.processing:
        return null;
    }
  }

  Color _getButtonColor() {
    switch (_recordingState) {
      case RecordingState.idle:
        return Theme.of(context).primaryColor;
      case RecordingState.recording:
        return Colors.red;
      case RecordingState.completed:
        return Colors.green;
      case RecordingState.processing:
        return Colors.grey;
    }
  }

  IconData _getButtonIcon() {
    switch (_recordingState) {
      case RecordingState.idle:
        return Icons.mic;
      case RecordingState.recording:
        return Icons.stop;
      case RecordingState.completed:
        return Icons.check;
      case RecordingState.processing:
        return Icons.hourglass_empty;
    }
  }

  String _formatDuration(int seconds) {
    final minutes = seconds ~/ 60;
    final remainingSeconds = seconds % 60;
    return '${minutes.toString().padLeft(2, '0')}:${remainingSeconds.toString().padLeft(2, '0')}';
  }
}

// Ê≥¢ÂΩ¢„ÇíÊèèÁîª„Åô„ÇãCustomPainter
class WaveformPainter extends CustomPainter {
  final double animationValue;

  WaveformPainter(this.animationValue);

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.red.withOpacity(0.6)
      ..strokeWidth = 2
      ..style = PaintingStyle.stroke;

    final path = Path();
    final waveCount = 5;
    
    for (int i = 0; i < waveCount; i++) {
      final x = (size.width / waveCount) * i;
      final height = sin((animationValue * 2 * pi) + (i * 0.5)) * 20;
      
      if (i == 0) {
        path.moveTo(x, size.height / 2 + height);
      } else {
        path.lineTo(x, size.height / 2 + height);
      }
    }
    
    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(WaveformPainter oldDelegate) {
    return oldDelegate.animationValue != animationValue;
  }
}
